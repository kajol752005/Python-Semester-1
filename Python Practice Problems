{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. problem: given two numbers a &b, find a/b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a/b= 2.0\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter the numerator: \"))                                         #input from user of numerator\n",
    "b=int(input(\"enter the denominator: \"))                                        #input from user of denominator\n",
    "\n",
    "if b!=0:                                                                      #b is not equals to 0\n",
    "    print(\"a/b=\",a/b)\n",
    "else:                                                                         #when b=0 then divison not possible\n",
    "    print(\"not defined\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. problem:given a temperature in fahrenheit, convert it to celsius. if the temperature is below 10 degree celsius output cold, between 10 & 25 output pleasent, between 25 & 35 output warm, and above 35 output hot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "temp. in celsius: 15.0\n",
      "weather is pleasent\n"
     ]
    }
   ],
   "source": [
    "t=float(input(\"enter the temp. in fahrenite: \"))               #input from user of temp. in farhrenite\n",
    "\n",
    "a=(t-32)*(5/9)                                                 #formula to change temp in faherenite to celsius\n",
    "print(\"temp. in celsius:\",a)\n",
    "\n",
    "if a<10:                                                       #if temp in celsius is less then 10 then weather is cold\n",
    "    print(\"weather is cold\")\n",
    "elif a>=10 and a<=25:                                          #if temp in celsius is between 10 & 25 then weather is pleasent\n",
    "    print(\"weather is pleasent\")                \n",
    "elif a>25 and a<35:                                            #if temp in celsius is between 25 & 35 then weather is warm\n",
    "    print(\"weather is warm\")\n",
    "else:\n",
    "    print(\"weather is hot\")                                     #if temp is more than 35 then weather is hot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. problem:Given a quadratic equation with coefficients a, b and c, find the two solutions (may be real or complex). You should not take the square root of a negative number in your code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roots are not real\n"
     ]
    }
   ],
   "source": [
    "#quadratic eq.= ax^2+bx+c\n",
    "#taking inputs from user for the coefficents of the quadratic equation i.e. a,b & c\n",
    "a=float(input(\"enter the coefficient of x^2:\"))\n",
    "b=float(input(\"enter the coefficient of x:\"))\n",
    "c=float(input(\"enter the constant\"))\n",
    "\n",
    "D=(b**2-4*a*c)                                     #descriminent\n",
    "x=D**0.5                                           #defining a variable for square root of descriminent\n",
    "\n",
    "\n",
    "\n",
    "if a==0:                                            #if a=0 the equation become linear i.e.\n",
    "    print(\"solutions is:\",-c/b)\n",
    "elif D>=0:                                          #if descriminent are greater than equal to 0 then equation have real solution\n",
    "    s1=(-b+x)/(2*a)                                 #formula for first solution\n",
    "    s2=(-b-x)/(2*a)                                 #formula for second solution\n",
    "    print(\"solutions are:\",s1,s2)                   \n",
    "else:                                               #if D is less than 0 than roots are complex\n",
    "    print(\"roots are not real\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. problem: given three points. find out whether they lie on the same straight line or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "points are on the same line\n"
     ]
    }
   ],
   "source": [
    "#take the input of the all three points \n",
    "\n",
    "x1=float(input(\"the x coordinat of the first point\"))\n",
    "y1=float(input(\"the y coordinat of the first point\"))\n",
    "x2=float(input(\"the x coordinat of the second point\"))\n",
    "y2=float(input(\"the y coordinat of the second point\"))\n",
    "x3=float(input(\"the x coordinat of the third point\"))\n",
    "y3=float(input(\"the y coordinat of the third point\"))\n",
    "\n",
    "a=(0.5)*(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))             #Area of triangle\n",
    "\n",
    "if a==0:                                               #if area of triangle is zero than all three points lie on the same line\n",
    "    print(\"points are on the same line\")\n",
    "else:                                                  #if area of triangle is not zero than all three points not lie on the same line     \n",
    "    print(\"points are not on the same line\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. problem: given a point in 2D space , find the quadrant in which it lies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "point lies in the first quadrant\n"
     ]
    }
   ],
   "source": [
    "x=float(input(\"enter the x coordinate: \"))                      #input from user for the x coordinate of point\n",
    "y=float(input(\"enter the y coordinate: \"))                      #input from user for the y coordinate of point\n",
    "\n",
    "if x==0 and y==0:                                               #if pt. is (0,0) then it is at origin\n",
    "    print(\"point is on origin\")\n",
    "elif x>0 and y>0:                                               #if both coordinates are positive then it lies in first quadrant\n",
    "    print(\"point lies in the first quadrant\") \n",
    "elif x<0 and y>0:\n",
    "    print(\"point lies in the second quadrant\")                  #if both coordinates are negative then it lies in second quadrant\n",
    "elif x<0 and y<0: \n",
    "    print(\"point lies in the third quadrant\")                   #if x is negative and y is positive then it lies in the third quadrant\n",
    "elif x>0 and y<0:\n",
    "    print(\"point lies in the fourth quadrant\")                  #if x is positive and y is negative then pt. lies in the fourth quadrant\n",
    "elif x==0:\n",
    "    print(\"point is on the y axis\")                             #if x=0 then point is on the y axis \n",
    "else: \n",
    "    print(\"point is on the x axis\")                             #if y=0 then point is on the x axis\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Given two points in 2D space, find the slope and y intercept of the line joining them. consider all cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "slope is infinite\n",
      "y intercept= 3.0\n"
     ]
    }
   ],
   "source": [
    "x1=float(input(\"the x coordinat of the first point\"))               #input from user for the x coordinate of first point\n",
    "y1=float(input(\"the y coordinat of the first point\"))               #input from user for the y coordinate of first point\n",
    "x2=float(input(\"the x coordinat of the second point\"))              #input from user for the x coordinate of second point\n",
    "y2=float(input(\"the y coordinat of the second point\"))              #input from user for the y coordinate of second point\n",
    "\n",
    "a=x2-x1                                                             # x intercept\n",
    "b=y2-y1                                                             # y intercept\n",
    "\n",
    "if a==0:\n",
    "    print(\"slope is infinite\")                                      #when x intercept is zero slope is infinite\n",
    "else:\n",
    "    print(b/a)                                                      #slope= (y intercept)/(x intercept)\n",
    "print(\"y intercept=\", b)                                            #y intercept= y2-y1 , i.e. b"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
